<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[摇嘞摇嘞iOS]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="https://github.com/zhuangxq/zhuangxq.github.io.git//"/>
  <updated>2016-03-24T16:41:31.000Z</updated>
  <id>https://github.com/zhuangxq/zhuangxq.github.io.git//</id>
  
  <author>
    <name><![CDATA[歪腰小强]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Masonry源码学习]]></title>
    <link href="https://github.com/zhuangxq/zhuangxq.github.io.git/2016/03/24/Masonry%E5%AD%A6%E4%B9%A0/"/>
    <id>https://github.com/zhuangxq/zhuangxq.github.io.git/2016/03/24/Masonry学习/</id>
    <published>2016-03-24T12:33:49.000Z</published>
    <updated>2016-03-24T16:41:31.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Overview">Overview</h2><p>Masonry已经是离不开的开发库了，所有布局都用它，记录一下<a href="https://github.com/SnapKit/Masonry">Masonary</a>的源码学习。带着几个问题开始。</p>
<ul>
<li>Masonry是如何工作的？</li>
<li>链式调用的语法是如何实现的？</li>
<li>使用注意项？</li>
</ul>
<h3 id="工作流程">工作流程</h3><p>Masonry目录，红框内为主要类。<br><img src="../images/masonry_1.png" alt=""></p>
<p>MASConstraints:核心类，可以表示NSLayoutConstraint的信息，可以是一个或一组约束。分别对应两个子类MASViewConstraints，MASCompositeConstraint。链式调用的实现也来自这个类。下文分析。</p>
<p>MASViewConstraints:MASConstraints子类，包含一个约束的相关信息，first/second MASViewAttribute, layoutRelation。提供安装、卸载约束的方法。下文“约束”都指MASViewConstraints。</p>
<p>MASCompositeConstraint:MASConstraints子类，包含多个MASViewConstraints。下文称之为”约束集”。</p>
<p>MASViewAttribute:存储NSLayoutAttribute信息，和其对应的view。</p>
<p>MASConstraintMaker:如其名，这是一个maker(废话！)。这相当于一个发动机，负责生产约束，并让约束工作起来。</p>
<p>先看一段代码，这个我们再熟悉不过。mas_一敲，回车一按，调的就是它！</p>
<pre><code>- (<span class="built_in">NSArray</span> *)mas_makeConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *))block {
    <span class="keyword">self</span><span class="variable">.translatesAutoresizingMaskIntoConstraints</span> = <span class="literal">NO</span>;
    MASConstraintMaker *constraintMaker = [[MASConstraintMaker alloc] initWithView:<span class="keyword">self</span>];
    block(constraintMaker);
    <span class="keyword">return</span> [constraintMaker install];
}
</code></pre><p>Masonry工作入口在此，创建一个发动机MASConstraintMaker, block(constraintMaker)的作用则是创建约束。再看这个方法的调用：</p>
<pre><code><span class="collection">[topView mas_makeConstraints:^<span class="list">(<span class="keyword">MASConstraintMaker</span> *make)</span> <span class="collection">{
    make.top.equalTo<span class="list">(<span class="keyword">self.view</span>)</span>.offSet<span class="list">(<span class="number">10</span>)</span><span class="comment">;</span>
    make.left.right.equalTo<span class="list">(<span class="keyword">self.view</span>)</span><span class="comment">;</span>
    make.bottom.equalTo<span class="list">(<span class="keyword">self.view</span>)</span><span class="comment">;</span>
}</span>]</span><span class="comment">;</span>
</code></pre><p>make.bottom.equalTo(self.view)就是创建一条MASViewConstraints约束，make.left.right.equalTo(self.view)创建一条MASCompositeConstraint约束(包含两条MASViewConstraints约束)。结合上面两段代码看出，block(constraintMaker)就是通过maker创建约束，每条约束会存安装一条NSLayoutConstraint的所有信息(包括firsetItem, secondItem, firstAttribute, secondAttribute, layoutRelation, priority, constant等。)</p>
<p>接着看下make.top.equalTo(self.view)如何产生一条约束。make.top执行的三个函数。</p>
<pre><code>- (MASConstraint *)top {
    <span class="keyword">return</span> [self <span class="string">addConstraintWithLayoutAttribute:</span>NSLayoutAttributeTop];
}
- (MASConstraint *)<span class="string">addConstraintWithLayoutAttribute:</span>(NSLayoutAttribute)layoutAttribute {
    <span class="keyword">return</span> [self <span class="string">constraint:</span>nil <span class="string">addConstraintWithLayoutAttribute:</span>layoutAttribute];
}
- (MASConstraint *)<span class="string">constraint:</span>(MASConstraint *)constraint <span class="string">addConstraintWithLayoutAttribute:</span>(NSLayoutAttribute)layoutAttribute {
    MASViewAttribute *viewAttribute = [[MASViewAttribute alloc] <span class="string">initWithView:</span>self.view <span class="string">layoutAttribute:</span>layoutAttribute];
    MASViewConstraint *newConstraint = [[MASViewConstraint alloc] <span class="string">initWithFirstViewAttribute:</span>viewAttribute];
    <span class="keyword">if</span> ([constraint <span class="string">isKindOfClass:</span>MASViewConstraint.<span class="keyword">class</span>]) {
        <span class="comment">//replace with composite constraint</span>
        NSArray *children = @[constraint, newConstraint];
        MASCompositeConstraint *compositeConstraint = [[MASCompositeConstraint alloc] <span class="string">initWithChildren:</span>children];
        compositeConstraint.delegate = self;
        [self <span class="string">constraint:</span>constraint <span class="string">shouldBeReplacedWithConstraint:</span>compositeConstraint];
        <span class="keyword">return</span> compositeConstraint;
    }
    <span class="keyword">if</span> (!constraint) {
        newConstraint.delegate = self;
        [self.constraints <span class="string">addObject:</span>newConstraint];
    }
    <span class="keyword">return</span> newConstraint;
}
</code></pre><p>看得出最终return 的是newConstraint，一个MASViewConstraint。大致过程：创建一个包含view是firstItem，attribute是NSLayoutAttributeTop的MASViewAttribute，再通过这个MASViewAttribute创建一个约束。并返回这个约束。这里有个重要信息, 不管创建的是约束或者约束集，它们都有个delegate指向maker。这是后面链式语法的关键点。另一个没那么重要信息是Masonry只在这个地方创建约束或约束集。make.top执行完毕，返回一个约束，接着看看.equalTo做了什么。</p>
<pre><code>- (MASConstraint * (^)(<span class="keyword">id</span>))equalTo {
    <span class="keyword">return</span> ^<span class="keyword">id</span>(<span class="keyword">id</span> attribute) {
        <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.equalToWithRelation</span>(attribute, <span class="built_in">NSLayoutRelationEqual</span>);
    };
}

- (MASConstraint * (^)(<span class="keyword">id</span>, <span class="built_in">NSLayoutRelation</span>))equalToWithRelation {
    <span class="keyword">return</span> ^<span class="keyword">id</span>(<span class="keyword">id</span> attribute, <span class="built_in">NSLayoutRelation</span> relation) {
        <span class="keyword">if</span> ([attribute isKindOfClass:<span class="built_in">NSArray</span><span class="variable">.class</span>]) {
            <span class="built_in">NSAssert</span>(!<span class="keyword">self</span><span class="variable">.hasLayoutRelation</span>, <span class="string">@"Redefinition of constraint relation"</span>);
            <span class="built_in">NSMutableArray</span> *children = <span class="built_in">NSMutableArray</span><span class="variable">.new</span>;
            <span class="keyword">for</span> (<span class="keyword">id</span> attr <span class="keyword">in</span> attribute) {
                MASViewConstraint *viewConstraint = [<span class="keyword">self</span> <span class="keyword">copy</span>];
                viewConstraint<span class="variable">.secondViewAttribute</span> = attr;
                [children addObject:viewConstraint];
            }
            MASCompositeConstraint *compositeConstraint = [[MASCompositeConstraint alloc] initWithChildren:children];
            compositeConstraint<span class="variable">.delegate</span> = <span class="keyword">self</span><span class="variable">.delegate</span>;
            [<span class="keyword">self</span><span class="variable">.delegate</span> constraint:<span class="keyword">self</span> shouldBeReplacedWithConstraint:compositeConstraint];
            <span class="keyword">return</span> compositeConstraint;
        } <span class="keyword">else</span> {
            <span class="built_in">NSAssert</span>(!<span class="keyword">self</span><span class="variable">.hasLayoutRelation</span> || <span class="keyword">self</span><span class="variable">.layoutRelation</span> == relation &amp;&amp; [attribute isKindOfClass:<span class="built_in">NSValue</span><span class="variable">.class</span>], <span class="string">@"Redefinition of constraint relation"</span>);
            <span class="keyword">self</span><span class="variable">.layoutRelation</span> = relation;
            <span class="keyword">self</span><span class="variable">.secondViewAttribute</span> = attribute;
            <span class="keyword">return</span> <span class="keyword">self</span>;
        }
    };
}
</code></pre><p>两个函数，先看第一行和最后一行，第一行equalTo返回的是一个block，最后一行block中return self, 执行block返回的是就是self约束本身，有什么用？后面可以接着再用.offSet.priority等做其他设置。这里block怎么用的来着：供外界传入参数，在里头用参数进行一些设置，再返回约束本身，后面继续调用。（不管有多少参数要设置，都可以用这种参数一直.下去。）再看这个block里面做了什么事情，self.secondViewAttribute = attribute，设置约束的secondViewAttribute,(ps:这里传入的attribute是UIView，在setter函数里会自动生成一个真正attribute)。 这里设置了secondAttribute,那first哪里设置呢？回上面看一下maker生产第一个约束(initWithFirstViewAttribute:viewAttribute),那会设置了firstAttribute。最后的.offSet就是设置约束的constant的，返回约束本身。这里有个不明白点，这里.equalTo为什么要通过block来设置？像.offSet那样直接传入参数，返回self，不也可以？看着没什么差别。搞不懂block好处在哪…</p>
<p>另外，代码可以看出attribute也可以是数组，对应make.top.equalTo(@[self.view, otherView])这种用法，这种用法则会产生一个约束集。对约束集调用.offSet或者.equalTo, 就是取出约束集的每一个约束，都处理一遍。下面来看另一种情况，make.left.right.top.equalTo(self.view)。</p>
<p>从上分析得make.left产生一个firstItem为leftAttribute的约束，接下来就是”约束.right”会怎样？答案是，生成一个firstItem为rightAttribute的约束， 两个约束合成一个约束集。见代码：</p>
<pre><code>- (MASConstraint *)right {
    <span class="keyword">return</span> [<span class="keyword">self</span> addConstraintWithLayoutAttribute:<span class="built_in">NSLayoutAttributeRight</span>];
}
- (MASConstraint *)addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute {
    <span class="built_in">NSAssert</span>(!<span class="keyword">self</span><span class="variable">.hasLayoutRelation</span>, <span class="string">@"Attributes should be chained before defining the constraint relation"</span>);

    <span class="keyword">return</span> [<span class="keyword">self</span><span class="variable">.delegate</span> constraint:<span class="keyword">self</span> addConstraintWithLayoutAttribute:layoutAttribute];
}
</code></pre><p>这里self.delegate的就是maker，用maker创建rightAttribute约束，合成一个约束集。maker创建约束代码已经贴在上面。再看继续.top会怎样，代码：</p>
<pre><code>- (MASConstraint *)top {
    return [<span class="keyword">self </span><span class="keyword">addConstraintWithLayoutAttribute:NSLayoutAttributeRight];
</span>}
- (MASConstraint *)<span class="keyword">addConstraintWithLayoutAttribute:(NSLayoutAttribute)layoutAttribute </span>{
    [<span class="keyword">self </span>constraint:<span class="keyword">self </span><span class="keyword">addConstraintWithLayoutAttribute:layoutAttribute];
</span>    return <span class="keyword">self;
</span>}
- (MASConstraint *)constraint:(MASConstraint __unused *)constraint <span class="keyword">addConstraintWithLayoutAttribute:(NSLayoutAttribute)layoutAttribute </span>{
    id&lt;MASConstraintDelegate&gt; <span class="keyword">strongDelegate </span>= <span class="keyword">self.delegate;
</span>    MASConstraint *newConstraint = [<span class="keyword">strongDelegate </span>constraint:<span class="keyword">self </span><span class="keyword">addConstraintWithLayoutAttribute:layoutAttribute];
</span>    newConstraint.delegate = <span class="keyword">self;
</span>    [<span class="keyword">self.childConstraints </span><span class="keyword">addObject:newConstraint];
</span>    return newConstraint<span class="comment">;</span>
}
</code></pre><p>同样这里delegate就是maker，用maker创建一个约束，加入到这个约束集。最后make.left.right.top.equalTo(self.view)，.equalTo就是从约束集里一个个约束抓出来.equalTo一下就是了。</p>
<p>总结一下,共三个步骤：</p>
<ol>
<li>maker生产约束或约束集，方式是”maker.left”或”约束.right”(也就是:make.left.right),约束是通过delegate调用maker的生产方法。</li>
<li>约束信息设置，设置secondItem, layoutRelation, constant, priority，约束本身提供约束相关信息设置方法，方式是.equalTo, .offSet .priority, 约束集的相关信息设置就是遍历处理包含的约束。</li>
<li>maker生产完约束，install all就完了。方式：maker存有所有设置的约束，install本身的方法在约束类里，maker遍历执行。</li>
</ol>
<h2 id="链式调用语法如何实现？">链式调用语法如何实现？</h2><p>上面的分析，链式语法如何实现已经很清晰了。.left .right. equalTo. offset等都会返回约束本身或者一个约束集。约束或约束集又可以做下一次…的链式调用。信息的设置方式有.offSet(@1),就直接传值进去，还有.equalTo,通过block来传。</p>
<h2 id="使用注意事项？">使用注意事项？</h2><p>大量的Masonry使用，基本没出什么状况，是比较稳定的。有两个小问题要稍微注意下。</p>
<p>1、mas_updateConstraints,有遇到这个没生效的情况。看一下代码：</p>
<pre><code>- (<span class="keyword">void</span>)install {

    ........此处省略若干代码........

    MASLayoutConstraint *existingConstraint = <span class="literal">nil</span>;
    <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.updateExisting</span>) {
        existingConstraint = [<span class="keyword">self</span> layoutConstraintSimilarTo:layoutConstraint];
    }
    <span class="keyword">if</span> (existingConstraint) {
        <span class="comment">// just update the constant</span>
        existingConstraint<span class="variable">.constant</span> = layoutConstraint<span class="variable">.constant</span>;
        <span class="keyword">self</span><span class="variable">.layoutConstraint</span> = existingConstraint;
    } <span class="keyword">else</span> {
        [<span class="keyword">self</span><span class="variable">.installedView</span> addConstraint:layoutConstraint];
        <span class="keyword">self</span><span class="variable">.layoutConstraint</span> = layoutConstraint;
        [firstLayoutItem<span class="variable">.mas_installedConstraints</span> addObject:<span class="keyword">self</span>];
    }
}

- (MASLayoutConstraint *)layoutConstraintSimilarTo:(MASLayoutConstraint *)layoutConstraint {
    <span class="comment">// check if any constraints are the same apart from the only mutable property constant</span>

    <span class="comment">// go through constraints in reverse as we do not want to match auto-resizing or interface builder constraints</span>
    <span class="comment">// and they are likely to be added first.</span>
    <span class="keyword">for</span> (<span class="built_in">NSLayoutConstraint</span> *existingConstraint <span class="keyword">in</span> <span class="keyword">self</span><span class="variable">.installedView</span><span class="variable">.constraints</span><span class="variable">.reverseObjectEnumerator</span>) {
        <span class="keyword">if</span> (![existingConstraint isKindOfClass:MASLayoutConstraint<span class="variable">.class</span>]) <span class="keyword">continue</span>;
        <span class="keyword">if</span> (existingConstraint<span class="variable">.firstItem</span> != layoutConstraint<span class="variable">.firstItem</span>) <span class="keyword">continue</span>;
        <span class="keyword">if</span> (existingConstraint<span class="variable">.secondItem</span> != layoutConstraint<span class="variable">.secondItem</span>) <span class="keyword">continue</span>;
        <span class="keyword">if</span> (existingConstraint<span class="variable">.firstAttribute</span> != layoutConstraint<span class="variable">.firstAttribute</span>) <span class="keyword">continue</span>;
        <span class="keyword">if</span> (existingConstraint<span class="variable">.secondAttribute</span> != layoutConstraint<span class="variable">.secondAttribute</span>) <span class="keyword">continue</span>;
        <span class="keyword">if</span> (existingConstraint<span class="variable">.relation</span> != layoutConstraint<span class="variable">.relation</span>) <span class="keyword">continue</span>;
        <span class="keyword">if</span> (existingConstraint<span class="variable">.multiplier</span> != layoutConstraint<span class="variable">.multiplier</span>) <span class="keyword">continue</span>;
        <span class="keyword">if</span> (existingConstraint<span class="variable">.priority</span> != layoutConstraint<span class="variable">.priority</span>) <span class="keyword">continue</span>;

        <span class="keyword">return</span> (<span class="keyword">id</span>)existingConstraint;
    }
    <span class="keyword">return</span> <span class="literal">nil</span>;
}
</code></pre><p>更新过程：给个标志updateExisting，YES为需要更新，需要更新的话，就先找有没有相似的约束存在。有相似的约束就更新约束的constant。没有相似约束就添加新的约束。那么问题来了，那如何定义相似？看上面代码。就是firsetItem,secondItem,firstAttribute,secondAttribute,releation,multiplier,priority都相等就定义为相似，则更新constant即可。平时使用时update没生效是个什么情况？很有可能的就是multiplier,priority变了，或者同样效果的约束用了不同方式。比如：width设置，初始设置有可能是.equalTo(otherView), 然后数据源变了，需要刷新值，我们就理所当然的.equalTo(@55), 这样什么问题？sencondItem不一样，不仅不是update，还叠加了一个width约束上去,导致冲突，然后就懵逼了，wtf…..</p>
<p>2、命名问题。view.left, view.centerX, 最好不要用这个, 用view.mas_left, view.mas_centerX。 这种命名很容易冲突，经常会有一些库或者我们自己的代码，也给UIView加了category,用centerX,left,right什么的来取view的坐标。这种比较通用的命名尽量避免。</p>
<h2 id="one_more_thing…">one more thing…</h2><p>话说怎么才能想出这种牛逼的设计啊！！！！！！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Overview">Overview</h2><p>Masonry已经是离不开的开发库了，所有布局都用它，记录一下<a href="https://github.com/SnapKit/Masonry">Masonary</a>的源码学习。带着几个问题开始。</p]]>
    </summary>
    
      <category term="iOS源码学习" scheme="https://github.com/zhuangxq/zhuangxq.github.io.git/tags/iOS%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="masonry" scheme="https://github.com/zhuangxq/zhuangxq.github.io.git/tags/masonry/"/>
    
      <category term="自动布局" scheme="https://github.com/zhuangxq/zhuangxq.github.io.git/tags/%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS设备如何正确获取设备启动时间？]]></title>
    <link href="https://github.com/zhuangxq/zhuangxq.github.io.git/2015/07/25/iOS%E8%AE%BE%E5%A4%87%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4%EF%BC%9F/"/>
    <id>https://github.com/zhuangxq/zhuangxq.github.io.git/2015/07/25/iOS设备如何正确获取设备启动时间？/</id>
    <published>2015-07-25T02:17:13.000Z</published>
    <updated>2015-07-25T05:43:54.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Overview">Overview</h2><p>前段时间产品功能需求需要用到设备启动时间。找了几种方法，几番周折算是找到满足了需求的方法。此篇记录一下如何正确姿势获取设备启动时间。方法4是满足我需求的设备启动时间，可直接前往。</p>
<h3 id="方法1">方法1</h3><p>很容易找到这个方法：<code>[NSProcessInfo processInfo].systemUptime</code>。</p>
<p>官方文档：<em>The time interval since the computer was restarted. (read-only)</em>,<br>设备重新启动后的连续运行时间。乍一看很好，搞定。其实这个接口根本就不准。用了这个接口，你会发现即使你没有重新启动，设备启动时间却一直有在变化。短时间内似乎都是对的，但是设备启动个几天就有问题了。具体原因不详。</p>
<h3 id="方法2">方法2</h3><pre><code><span class="preprocessor">#<span class="keyword">include</span> &lt;sys/types.h&gt;</span>
<span class="preprocessor">#<span class="keyword">include</span> &lt;sys/sysctl.h&gt; </span>
<span class="preprocessor">#<span class="keyword">define</span> MIB_SIZE 2  </span>

<span class="keyword">int</span> mib[MIB_SIZE];
<span class="keyword">size_t</span> size;
<span class="keyword">struct</span> timeval  boottime;

mib[<span class="number">0</span>] = CTL_KERN;
mib[<span class="number">1</span>] = KERN_BOOTTIME;
size = <span class="keyword">sizeof</span>(boottime);
<span class="keyword">if</span> (sysctl(mib, MIB_SIZE, &amp;boottime, &amp;size, NULL, <span class="number">0</span>) != -<span class="number">1</span>)
{
    <span class="comment">// successful call</span>
    NSDate* bootDate = [NSDate dateWithTimeIntervalSince1970:boottime.tv_sec];
}
</code></pre><p>上面代码来自<a href="http://stackoverflow.com/questions/10331020/get-the-boot-time-in-objective-c" target="_blank" rel="external">这里</a>。关键代码主要是sysctl，用来获取或设置内核状态的函数。sysctl及更多内核状态信息<a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man8/sysctl.8.html" target="_blank" rel="external">戳这里</a>。上面代码就是直接读取内核状态中的设备启动时间。KERN_BOOTTIME点击进去头文件是这样描述的：/<em> struct: time kernel was booted </em>/。内核启动时间，这总靠谱了吧。经验证，这个时间是靠谱的。但是有个问题，如果改了设备时间，这个重启时间居然也跟着变…可见，这个参数的返回值是根据当前设备时间计算来的。一些需要准确判断重启时间的逻辑，显然在改变设备时间的状况下就有问题了。所以，不满足要求…</p>
<h3 id="方法3">方法3</h3><pre><code><span class="preprocessor">#include <span class="title">&lt;arpa/inet.h&gt;</span></span>
<span class="preprocessor">#include <span class="title">&lt;net/if.h&gt;</span></span>
<span class="preprocessor">#include <span class="title">&lt;ifaddrs.h&gt;</span></span>
<span class="preprocessor">#include <span class="title">&lt;net/if_dl.h&gt;</span></span>


<span class="built_in">BOOL</span>   success;
<span class="keyword">struct</span> ifaddrs *addrs;
<span class="keyword">const</span> <span class="keyword">struct</span> ifaddrs *cursor;
<span class="keyword">const</span> <span class="keyword">struct</span> if_data *networkStatisc;

<span class="built_in">NSString</span> *name=[[<span class="built_in">NSString</span> alloc]init];

<span class="keyword">struct</span> IF_DATA_TIMEVAL changeTime ;

success = getifaddrs(&amp;addrs) == <span class="number">0</span>;
<span class="keyword">if</span> (success)
{
    cursor = addrs;
    <span class="keyword">while</span> (cursor != <span class="literal">NULL</span>)
    {
        name=[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%s"</span>,cursor-&gt;ifa_name];
        <span class="keyword">if</span> (cursor-&gt;ifa_addr-&gt;sa_family == AF_LINK)
        {
            <span class="keyword">if</span> ([name hasPrefix:<span class="string">@"en1"</span>])
            {
                networkStatisc = (<span class="keyword">const</span> <span class="keyword">struct</span> if_data *) cursor-&gt;ifa_data;
                changeTime = networkStatisc-&gt;ifi_lastchange;
                <span class="built_in">NSDate</span> *restartTime = [<span class="built_in">NSDate</span> dateWithTimeIntervalSince1970:changeTime<span class="variable">.tv_sec</span>];
            }
            <span class="keyword">if</span> ([name hasPrefix:<span class="string">@"pdp_ip1"</span>])
            {
                networkStatisc = (<span class="keyword">const</span> <span class="keyword">struct</span> if_data *) cursor-&gt;ifa_data;
                changeTime = networkStatisc-&gt;ifi_lastchange;
                <span class="built_in">NSDate</span> *restartTime = [<span class="built_in">NSDate</span> dateWithTimeIntervalSince1970:changeTime<span class="variable">.tv_sec</span>];
            }
        }
        cursor = cursor-&gt;ifa_next;
    }
    freeifaddrs(addrs);
}
</code></pre><p>上面代码是获取网络接口流量改变时间。 en开头的是WiFi网口，pdp_ip开头的是移动流量网口。有用到的是en0,和pdp_ip0,其他都是没用的（其实是不知道它什么时候会用到…）。设备重启会重置网络接口的数据，ifi_lastchange就会更新为重启的时间。对于en1、pdp_ip1就只在设备重启的时候改变，就可以作为设备重启时间。可惜的是，存在与方法2同样的问题，所以，不满足需求…</p>
<h3 id="方法4">方法4</h3><pre><code><span class="keyword">int</span> mib[<span class="number">4</span>] = {CTL_KERN, KERN_PROC, KERN_PROC_ALL, <span class="number">0</span>};
size_t miblen = <span class="number">4</span>;

size_t size;
<span class="keyword">int</span> st = sysctl(mib, miblen, <span class="literal">NULL</span>, &amp;size, <span class="literal">NULL</span>, <span class="number">0</span>);

<span class="keyword">struct</span> kinfo_proc * process = <span class="literal">NULL</span>;
<span class="keyword">struct</span> kinfo_proc * newprocess = <span class="literal">NULL</span>;

<span class="keyword">do</span> {
    size += size / <span class="number">10</span>;
    newprocess = realloc(process, size);

    <span class="keyword">if</span> (!newprocess){
       <span class="keyword">if</span> (process)
        {
            free(process);
        }
        <span class="keyword">return</span> <span class="literal">nil</span>;
    }

    process = newprocess;
    st = sysctl(mib, miblen, process, &amp;size, <span class="literal">NULL</span>, <span class="number">0</span>);
} <span class="keyword">while</span> (st == -<span class="number">1</span> &amp;&amp; errno == ENOMEM);

<span class="keyword">if</span> (st == <span class="number">0</span>){
    <span class="keyword">if</span> (size % <span class="keyword">sizeof</span>(<span class="keyword">struct</span> kinfo_proc) == <span class="number">0</span>){
        <span class="keyword">int</span> nprocess = size / <span class="keyword">sizeof</span>(<span class="keyword">struct</span> kinfo_proc);
        <span class="keyword">if</span> (nprocess)            {
            <span class="built_in">NSMutableArray</span> * array = [[<span class="built_in">NSMutableArray</span> alloc] init];
            <span class="keyword">for</span> (<span class="keyword">int</span> i = nprocess - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)
            {
                <span class="built_in">NSString</span> * processID = [[<span class="built_in">NSString</span> alloc] initWithFormat:<span class="string">@"%d"</span>, process[i]<span class="variable">.kp_proc</span><span class="variable">.p_pid</span>];
                <span class="built_in">NSString</span> * processName = [[<span class="built_in">NSString</span> alloc]initWithBytes:(<span class="keyword">const</span> <span class="keyword">void</span> *)process[i]<span class="variable">.kp_proc</span><span class="variable">.p_comm</span>
                                                                 length:strlen(process[i]<span class="variable">.kp_proc</span><span class="variable">.p_comm</span>)
                                                               encoding:<span class="built_in">NSUTF8StringEncoding</span>];

               <span class="keyword">if</span> ([processName isEqualToString:<span class="string">@"kernel_task"</span>]) 
                {
                    <span class="built_in">NSTimeInterval</span> time = process[i]<span class="variable">.kp_proc</span><span class="variable">.p_un</span><span class="variable">.__p_starttime</span><span class="variable">.tv_sec</span>;
                    ;
                }
            }

            free(process);
            <span class="keyword">return</span> array;
        }
    }
}    
</code></pre><p>上面代码做俩个事：1、获取正在运行进程列表。2、找到kernel_task进程，kernel_task进程的启动时间就可作为设备重启的时间。经测试，没有方法2、3的问题。满足要求。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Overview">Overview</h2><p>前段时间产品功能需求需要用到设备启动时间。找了几种方法，几番周折算是找到满足了需求的方法。此篇记录一下如何正确姿势获取设备启动时间。方法4是满足我需求的设备启动时间，可直接前往。</p>
<h3 id="方法1"]]>
    </summary>
    
      <category term="iOS" scheme="https://github.com/zhuangxq/zhuangxq.github.io.git/tags/iOS/"/>
    
      <category term="设备启动时间" scheme="https://github.com/zhuangxq/zhuangxq.github.io.git/tags/%E8%AE%BE%E5%A4%87%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开篇！]]></title>
    <link href="https://github.com/zhuangxq/zhuangxq.github.io.git/2015/07/07/%E5%BC%80%E7%AF%87%EF%BC%81/"/>
    <id>https://github.com/zhuangxq/zhuangxq.github.io.git/2015/07/07/开篇！/</id>
    <published>2015-07-07T13:37:17.000Z</published>
    <updated>2015-07-07T15:01:14.000Z</updated>
    <content type="html"><![CDATA[<h2 id="总算可以写上东西了。">总算可以写上东西了。</h2><p>   花了一个晚上部署，半个晚上换主题改七改八，hexo问题还是很多啊。不过想想hexo来自于学生之手，也是叼得不行啊。搭个blog好像十年前在玩QQ空间似的，好玩！感谢hexo作者，感谢yillia主题作者。这里就用来记录学习成长的点滴了（Markdown赶紧熟悉一下-。-）。玩的愉快~！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="总算可以写上东西了。">总算可以写上东西了。</h2><p>   花了一个晚上部署，半个晚上换主题改七改八，hexo问题还是很多啊。不过想想hexo来自于学生之手，也是叼得不行啊。搭个blog好像十年前在玩QQ空间似的，好玩！感谢hexo作者，感谢yillia主题]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="https://github.com/zhuangxq/zhuangxq.github.io.git/2015/07/06/hello-world/"/>
    <id>https://github.com/zhuangxq/zhuangxq.github.io.git/2015/07/06/hello-world/</id>
    <published>2015-07-06T13:20:49.000Z</published>
    <updated>2015-07-06T13:20:49.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>